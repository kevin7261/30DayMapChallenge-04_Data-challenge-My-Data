{"version":3,"file":"js/app.7f152b6d.js","mappings":"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","sources":["webpack://30daymapchallenge-04-data-challenge-my-data/./src/App.vue","webpack://30daymapchallenge-04-data-challenge-my-data/./src/App.vue?7ccd","webpack://30daymapchallenge-04-data-challenge-my-data/./src/views/HomeView.vue","webpack://30daymapchallenge-04-data-challenge-my-data/./src/tabs/MapTab.vue","webpack://30daymapchallenge-04-data-challenge-my-data/./src/stores/dataStore.js","webpack://30daymapchallenge-04-data-challenge-my-data/./src/stores/defineStore.js","webpack://30daymapchallenge-04-data-challenge-my-data/./src/tabs/MapTab.vue?15ab","webpack://30daymapchallenge-04-data-challenge-my-data/./src/views/HomeView.vue?1da1","webpack://30daymapchallenge-04-data-challenge-my-data/./src/router/index.js","webpack://30daymapchallenge-04-data-challenge-my-data/./src/main.js","webpack://30daymapchallenge-04-data-challenge-my-data/webpack/bootstrap","webpack://30daymapchallenge-04-data-challenge-my-data/webpack/runtime/chunk loaded","webpack://30daymapchallenge-04-data-challenge-my-data/webpack/runtime/compat get default export","webpack://30daymapchallenge-04-data-challenge-my-data/webpack/runtime/define property getters","webpack://30daymapchallenge-04-data-challenge-my-data/webpack/runtime/global","webpack://30daymapchallenge-04-data-challenge-my-data/webpack/runtime/hasOwnProperty shorthand","webpack://30daymapchallenge-04-data-challenge-my-data/webpack/runtime/jsonp chunk loading","webpack://30daymapchallenge-04-data-challenge-my-data/webpack/startup"],"sourcesContent":["<script>\n  /**\n   * 🏠 App.vue - 應用程式主組件\n   *\n   * 功能說明：\n   * 1. 🏗️ 提供應用程式整體框架和佈局結構\n   * 2. ⏳ 管理全域載入狀態和進度顯示\n   * 3. 🚀 管理 Vue Router 的路由導航系統\n   * 4. 📱 實現響應式滿版佈局，無邊距和空隙\n   *\n   * 架構說明：\n   * - 內容層：路由視圖容器，動態顯示不同頁面組件\n   *\n   * 設計理念：\n   * - 滿版無邊距佈局設計\n   * - 模組化組件架構\n   */\n\n  // 🔧 Vue Composition API 引入\n  import { ref } from 'vue';\n\n  export default {\n    name: 'App',\n\n    /**\n     * 🧩 組件註冊 (Component Registration)\n     * 註冊應用程式層級使用的組件\n     */\n    components: {},\n\n    /**\n     * 🔧 組件設定函數 (Component Setup)\n     * 使用 Composition API 設定應用程式層級的狀態管理\n     */\n    setup() {\n      // ⏳ 全域載入狀態管理 (Global Loading State Management)\n      /** ⏳ 是否顯示載入覆蓋層 */\n      const isLoading = ref(false);\n      /** 📝 載入文字提示 */\n      const loadingText = ref('載入中...');\n      /** 📊 載入進度百分比 (0-100) */\n      const loadingProgress = ref(0);\n      /** 📊 是否顯示進度條 */\n      const showLoadingProgress = ref(false);\n      /** 📝 載入子文字說明 */\n      const loadingSubText = ref('');\n\n      // 📤 返回響應式數據和函數給模板使用 (Return Reactive Data and Functions)\n      return {\n        // ⏳ 載入狀態\n        isLoading, // 載入狀態開關\n        loadingText, // 載入主要文字\n        loadingProgress, // 載入進度\n        showLoadingProgress, // 是否顯示進度條\n        loadingSubText, // 載入輔助文字\n      };\n    },\n  };\n</script>\n\n<template>\n  <!-- 🏠 App.vue - 主應用程式組件 (Main Application Component) -->\n  <!-- 提供應用程式整體框架，使用 Bootstrap 實現滿版無空隙佈局 -->\n  <div id=\"app\" class=\"d-flex flex-column vh-100\">\n    <!-- 📱 主要內容區域 (Main Content Area) -->\n    <div class=\"d-flex flex-column overflow-hidden\">\n      <router-view />\n    </div>\n  </div>\n</template>\n\n<style>\n  /**\n * 🎨 應用程式全域樣式 (Application Global Styles)\n *\n * 引入共用 CSS 並定義應用程式層級的樣式\n * 注意：大部分樣式已移至 common.css 中統一管理\n */\n\n  /* 📦 引入共用樣式表 (Import Common Stylesheets) */\n  @import './assets/css/common.css';\n\n  /* 📱 應用程式特定樣式 (App-Specific Styles) */\n  /* 其他樣式已整合至 common.css 中，避免重複定義 */\n</style>\n","import { render } from \"./App.vue?vue&type=template&id=5744d3d4\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\n\nimport \"./App.vue?vue&type=style&index=0&id=5744d3d4&lang=css\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<script>\n  /**\n   * 🏠 HomeView.vue - 主頁面組件 (Main Page Component)\n   *\n   * 這是應用程式的主頁面，整合了地圖顯示和控制面板。\n   * 主要功能：\n   * - 顯示世界城市地圖\n   * - 提供城市導航按鈕\n   * - 提供底圖切換功能\n   * - 響應式佈局設計\n   *\n   * 組件結構：\n   * - MapTab: 地圖顯示組件\n   * - 控制面板: 城市導航和底圖選擇\n   */\n\n  import MapTab from '../tabs/MapTab.vue';\n  import { useDataStore } from '@/stores/dataStore.js';\n  import { useDefineStore } from '@/stores/defineStore.js';\n  import { ref, onMounted, computed } from 'vue';\n\n  export default {\n    name: 'HomeView',\n    components: { MapTab },\n    setup() {\n      // 📦 存儲實例\n      const dataStore = useDataStore();\n      const defineStore = useDefineStore();\n\n      /**\n       * 🗺️ 設定地圖實例\n       * 將 D3.js 地圖實例傳遞給 dataStore 以便城市導航使用\n       * @param {Object} map - D3.js 地圖實例（包含 svg, projection, path）\n       */\n      const setMapInstance = (map) => dataStore.setMapInstance(map);\n\n      /**\n       * 🌍 導航到指定國家\n       * 將地圖視圖移動到選定國家的中心位置\n       * @param {string} countryId - 國家 ID\n       */\n      const navigateToCountry = (countryId) => {\n        // 更新當前國家名稱\n        const country = countries.value?.find((c) => c.layerId === countryId);\n        if (country) {\n          console.log('🌍 切換到國家:', country.layerName);\n          currentCountry.value = country.layerName;\n        }\n        dataStore.navigateToCountry(countryId);\n      };\n\n      // 移除底圖切換功能，使用預設的標準地圖\n\n      // 📊 獲取國家列表\n      const countries = computed(() => dataStore.layers[0].groupLayers);\n\n      // 🌍 當前選中的國家（預設為台灣）\n      const currentCountry = ref('TAIWAN');\n\n      // 🚀 初始化應用程式\n      onMounted(() => {\n        // 直接導航到台灣\n        navigateToCountry('Taiwan');\n      });\n\n      return {\n        setMapInstance,\n        navigateToCountry,\n        countries,\n        defineStore,\n        currentCountry,\n      };\n    },\n  };\n</script>\n\n<template>\n  <!-- 🏠 主應用程式容器 -->\n  <div id=\"app\" class=\"d-flex flex-column vh-100\">\n    <!-- 🗺️ 地圖區域容器 -->\n    <div class=\"flex-grow-1 overflow-hidden position-relative\">\n      <!-- 🗺️ 地圖組件 -->\n      <MapTab @map-ready=\"setMapInstance\" :current-country=\"currentCountry\" />\n\n      <!-- 🎛️ 左側中間控制面板 -->\n      <div\n        class=\"position-absolute\"\n        style=\"top: 50%; left: 0; transform: translateY(-50%); z-index: 1000; padding: 1rem\"\n      >\n        <div class=\"bg-dark bg-opacity-75 rounded-3 p-3\">\n          <!-- 🌍 國家導航區域 -->\n          <div class=\"\">\n            <div class=\"d-flex flex-column gap-1\">\n              <button\n                v-for=\"country in countries\"\n                :key=\"country.layerId\"\n                class=\"btn border-0 my-country-btn my-font-sm-white px-4 py-3\"\n                :class=\"[currentCountry === country.layerName ? 'active' : '']\"\n                @click=\"navigateToCountry(country.layerId)\"\n              >\n                {{ country.layerName }}\n              </button>\n            </div>\n          </div>\n\n          <!-- 移除底圖選擇區域，使用預設的標準地圖 -->\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<style>\n  @import '../assets/css/common.css';\n</style>\n","<script>\n  /**\n   * 🗺️ MapTab.vue - D3.js 世界地圖組件 (D3.js World Map Component)\n   *\n   * 使用 D3.js 繪製世界地圖，專為世界城市地圖展示設計。\n   * 主要功能：\n   * - 使用 D3.js 顯示世界地圖\n   * - 提供城市導航功能\n   * - 支援多種投影方式\n   * - 響應式設計\n   *\n   * 技術架構：\n   * - Vue 3 Composition API\n   * - D3.js 地圖繪製\n   * - Pinia 狀態管理\n   * - Bootstrap 5 樣式\n   */\n\n  import { ref, onMounted, onUnmounted, watch, nextTick, computed } from 'vue';\n  import * as d3 from 'd3';\n  import { useDataStore } from '@/stores/dataStore.js';\n  import { useDefineStore } from '@/stores/defineStore.js';\n\n  export default {\n    name: 'MapTab',\n    props: {\n      currentCountry: { type: String, default: '國家名稱' },\n    },\n    emits: ['map-ready'],\n    setup(props, { emit }) {\n      // 📦 存儲實例\n      const dataStore = useDataStore();\n      const defineStore = useDefineStore();\n\n      // 🗺️ 地圖相關變數\n      const mapContainer = ref(null);\n      const svgElement = ref(null);\n      let svg = null;\n      let projection = null;\n      let path = null;\n      let zoom = null;\n      let g = null;\n      let ringsGroup = null;\n\n      // 🎛️ 地圖控制狀態\n      const isMapReady = ref(false);\n      const mapContainerId = ref(`d3-map-${Math.random().toString(36).substr(2, 9)}`);\n\n      // 世界地圖數據\n      const worldData = ref(null);\n\n      // 圓圈現在使用 D3.js 繪製，不需要大小計算函數\n\n      // 📊 計算屬性：檢查是否有任何圖層可見\n      const isAnyLayerVisible = computed(() => dataStore.getAllLayers().length > 0);\n\n      // 🏙️ 當前國家信息\n      const currentCountryInfo = computed(() => {\n        if (!props.currentCountry) {\n          return null;\n        }\n\n        const allLayers = dataStore.getAllLayers();\n        const countryLayer = allLayers.find((layer) => layer.layerName === props.currentCountry);\n        if (countryLayer) {\n          return {};\n        } else {\n          return null;\n        }\n      });\n\n      /**\n       * 📥 載入世界地圖數據\n       */\n      const loadWorldData = async () => {\n        try {\n          // 使用本地的 GeoJSON 檔案\n          console.log('[MapTab] 開始載入 GeoJSON 數據...');\n          const response = await fetch(\n            `${process.env.BASE_URL}data/ne_110m_admin_0_countries.geojson`\n          );\n\n          if (!response.ok) {\n            throw new Error(`HTTP 錯誤! 狀態: ${response.status}`);\n          }\n\n          const data = await response.json();\n          worldData.value = data;\n          console.log('[MapTab] 世界地圖數據載入成功，特徵數量:', data.features?.length);\n          return true;\n        } catch (error) {\n          console.error('[MapTab] 世界地圖數據載入失敗:', error);\n          return false;\n        }\n      };\n\n      /**\n       * 🏗️ 創建地圖實例\n       * 初始化 D3 地圖並設定基本配置\n       */\n      const createMap = () => {\n        if (!mapContainer.value) return false;\n\n        const rect = mapContainer.value.getBoundingClientRect();\n        if (rect.width === 0 || rect.height === 0) {\n          console.warn('[MapTab] 容器尺寸為零，延遲初始化');\n          return false;\n        }\n\n        try {\n          const width = rect.width;\n          const height = rect.height;\n\n          // 創建 SVG 元素\n          svg = d3\n            .select(mapContainer.value)\n            .append('svg')\n            .attr('width', width)\n            .attr('height', height)\n            .style('background', '#f0f0f0');\n\n          svgElement.value = svg.node();\n\n          // 創建投影 - 使用方位等距投影 (Azimuthal Equidistant Projection)\n          // 預設以台灣地理中心為投影中心\n          // 添加32px padding，確保地圖不會貼邊\n          const padding = 32;\n          const availableWidth = width - padding * 2;\n          const availableHeight = height - padding * 2;\n          const scale = Math.min(availableWidth, availableHeight) / 6;\n\n          projection = d3\n            .geoAzimuthalEquidistant()\n            .rotate([-120.982025, -23.973875]) // 以台灣地理中心為中心\n            .scale(scale) // 使用計算後的縮放比例\n            .translate([width / 2, height / 2])\n            .clipAngle(180);\n\n          // 創建路徑生成器\n          path = d3.geoPath().projection(projection);\n\n          // 創建容器組\n          g = svg.append('g');\n\n          // 設置縮放行為（禁用所有互動）\n          zoom = d3\n            .zoom()\n            .scaleExtent([1, 1]) // 禁用縮放\n            .on('zoom', null); // 禁用縮放事件\n\n          svg.call(zoom).on('wheel.zoom', null).on('dblclick.zoom', null);\n\n          isMapReady.value = true;\n\n          // 將地圖實例和方法一起傳遞\n          const mapInterface = {\n            svg,\n            projection,\n            path,\n            navigateToLocation: (center) => navigateToLocation(center),\n          };\n\n          emit('map-ready', mapInterface);\n\n          console.log('[MapTab] D3 地圖創建成功');\n          return true;\n        } catch (error) {\n          console.error('[MapTab] D3 地圖創建失敗:', error);\n          return false;\n        }\n      };\n\n      /**\n       * 🔵 繪製以投影中心為圓心的同心距離圓\n       * 每 5000 公里一圈，淺灰虛線，永遠位於地圖上層\n       * 最多繪製到 15000 公里（3 圈）\n       * 地球邊界（180°）繪製實線圓圈\n       */\n      const drawDistanceRings = () => {\n        if (!svg || !projection || !mapContainer.value) return;\n\n        const [cx, cy] = projection.translate();\n        const scale = projection.scale();\n\n        // 以公尺為單位的地球半徑與步長（5000 公里）\n        const earthRadiusMeters = 6371008.8;\n        const stepMeters = 5000000; // 5000 km\n        const maxDistanceMeters = 15000000; // 15000 km\n\n        // 計算需要的圈數與對應像素半徑（r = scale * (distance / R)）\n        const rings = [];\n        for (let i = 1; i <= 3; i++) {\n          const distanceMeters = stepMeters * i;\n          if (distanceMeters > maxDistanceMeters) break;\n          const radiusPx = scale * (distanceMeters / earthRadiusMeters);\n          rings.push({ index: i, radiusPx, type: 'distance' });\n        }\n\n        // 加入地球邊界圓（180° = π * R，在方位等距投影中對應到 scale * π）\n        const earthBoundaryRadiusPx = scale * Math.PI;\n        rings.push({ index: 999, radiusPx: earthBoundaryRadiusPx, type: 'boundary' });\n\n        if (!ringsGroup) {\n          ringsGroup = svg\n            .append('g')\n            .attr('class', 'rings-overlay')\n            .style('pointer-events', 'none');\n        }\n\n        // 確保在最上層\n        ringsGroup.raise();\n\n        // 資料繫結與繪製\n        const selection = ringsGroup.selectAll('circle.ring').data(rings, (d) => d.index);\n\n        selection\n          .enter()\n          .append('circle')\n          .attr('class', 'ring')\n          .attr('fill', 'none')\n          .merge(selection)\n          .attr('cx', cx)\n          .attr('cy', cy)\n          .attr('r', (d) => d.radiusPx)\n          .attr('stroke', (d) => (d.type === 'boundary' ? '#666666' : '#cccccc'))\n          .attr('stroke-width', (d) => (d.type === 'boundary' ? 2 : 1))\n          .attr('stroke-dasharray', (d) => (d.type === 'boundary' ? 'none' : '6,6'));\n\n        selection.exit().remove();\n      };\n\n      /**\n       * 🎨 繪製世界地圖\n       */\n      const drawWorldMap = async () => {\n        if (!g || !worldData.value) {\n          console.error('[MapTab] 無法繪製地圖: g=', !!g, 'worldData=', !!worldData.value);\n          return;\n        }\n\n        try {\n          // 直接使用 GeoJSON 數據（無需轉換）\n          const countries = worldData.value;\n          console.log('[MapTab] 開始繪製地圖，國家數量:', countries.features?.length);\n\n          // 繪製國家邊界\n          g.selectAll('path')\n            .data(countries.features)\n            .enter()\n            .append('path')\n            .attr('d', path)\n            .attr('fill', (d) => {\n              // 檢查國家顏色：台灣(紅色) > 已造訪(淺藍色) > 其他(淺灰色)\n              const countryName = d.properties.name || d.properties.ADMIN || d.properties.NAME;\n              if (dataStore.isHomeCountry(countryName)) return '#ff9999'; // 台灣：紅色\n              if (dataStore.isCountryVisited(countryName)) return '#cce5ff'; // 已造訪：淺藍色\n              return '#d0d0d0'; // 其他：淺灰色\n            })\n            .attr('stroke', '#666666')\n            .attr('stroke-width', 0.5)\n            .attr('class', 'country');\n\n          // 距離圓圈功能已移除\n\n          console.log('[MapTab] 世界地圖繪製完成，已繪製', countries.features?.length, '個國家');\n        } catch (error) {\n          console.error('[MapTab] 世界地圖繪製失敗:', error);\n        }\n      };\n\n      // addCityMarkers 函數已移除 - 不再需要城市標記\n\n      /**\n       * 🌍 導航到指定位置\n       * 使用方位等距投影，將選定的國家設為地圖中心\n       * 地球大小保持不變，只改變旋轉中心\n       */\n      const navigateToLocation = (center) => {\n        if (!svg || !projection) return;\n\n        const rect = mapContainer.value.getBoundingClientRect();\n        const width = rect.width;\n        const height = rect.height;\n\n        // 方位等距投影：使用 rotate 將選定位置旋轉到中心\n        // rotate 接受 [lambda, phi, gamma]，其中 lambda 和 phi 是經緯度的負值\n        // 地球大小保持固定，不隨導航改變\n        // 添加32px padding，確保地圖不會貼邊\n        const padding = 32;\n        const availableWidth = width - padding * 2;\n        const availableHeight = height - padding * 2;\n        const scale = Math.min(availableWidth, availableHeight) / 6;\n\n        projection.rotate([-center[0], -center[1]]).scale(scale);\n\n        // 更新所有路徑\n        g.selectAll('path.country').attr('d', path);\n\n        // 重新繪製距離圓\n        drawDistanceRings();\n\n        console.log('[MapTab] 地圖導航完成，中心:', center);\n      };\n\n      /**\n       * 📏 刷新地圖尺寸\n       * 當容器大小改變時重新計算地圖尺寸\n       */\n      const invalidateSize = () => {\n        if (!svg || !mapContainer.value) return;\n\n        const rect = mapContainer.value.getBoundingClientRect();\n        const width = rect.width;\n        const height = rect.height;\n\n        svg.attr('width', width).attr('height', height);\n\n        // 添加32px padding，確保地圖不會貼邊\n        const padding = 32;\n        const availableWidth = width - padding * 2;\n        const availableHeight = height - padding * 2;\n        const scale = Math.min(availableWidth, availableHeight) / 6;\n\n        projection.translate([width / 2, height / 2]).scale(scale);\n\n        // 更新所有路徑\n        g.selectAll('path.country').attr('d', path);\n\n        // 重新繪製距離圓\n        drawDistanceRings();\n\n        console.log('[MapTab] 地圖尺寸更新完成');\n      };\n\n      /**\n       * 🚀 初始化地圖\n       * 創建地圖並載入初始數據\n       */\n      const initMap = async () => {\n        let attempts = 0;\n        const maxAttempts = 20;\n\n        // 先載入世界地圖數據\n        const loaded = await loadWorldData();\n        if (!loaded) {\n          console.error('[MapTab] 無法載入世界地圖數據');\n          return;\n        }\n\n        const tryCreateMap = async () => {\n          if (attempts >= maxAttempts) {\n            console.error('[MapTab] 地圖初始化失敗，已達到最大嘗試次數');\n            return;\n          }\n\n          attempts++;\n          console.log(`[MapTab] 嘗試創建地圖 (${attempts}/${maxAttempts})`);\n\n          if (createMap()) {\n            console.log('[MapTab] 地圖創建成功，開始繪製世界地圖');\n            await drawWorldMap();\n            // 繪製距離圓（置於最上層）\n            drawDistanceRings();\n          } else {\n            console.log('[MapTab] 地圖創建失敗，100ms 後重試');\n            setTimeout(tryCreateMap, 100);\n          }\n        };\n\n        tryCreateMap();\n      };\n\n      // 📏 設置 ResizeObserver 監聽容器大小變化\n      let resizeObserver = null;\n      let resizeTimeout = null;\n\n      const setupResizeObserver = () => {\n        if (!mapContainer.value || !window.ResizeObserver) return;\n\n        resizeObserver = new ResizeObserver(() => {\n          if (resizeTimeout) {\n            clearTimeout(resizeTimeout);\n          }\n\n          resizeTimeout = setTimeout(() => {\n            console.log('🔄 容器大小變化，刷新地圖');\n            invalidateSize();\n          }, 200);\n        });\n\n        resizeObserver.observe(mapContainer.value);\n        console.log('✅ ResizeObserver 已設置');\n      };\n\n      // 🧹 生命週期：組件掛載\n      onMounted(() => {\n        nextTick(() => {\n          initMap();\n          setupResizeObserver();\n        });\n      });\n\n      // 🧹 生命週期：組件卸載\n      onUnmounted(() => {\n        if (resizeTimeout) {\n          clearTimeout(resizeTimeout);\n        }\n\n        if (resizeObserver) {\n          resizeObserver.disconnect();\n        }\n\n        if (svg) {\n          svg.remove();\n          svg = null;\n        }\n\n        projection = null;\n        path = null;\n        zoom = null;\n        g = null;\n        isMapReady.value = false;\n      });\n\n      // 👀 監聽器：監聽資料存儲中的圖層變化\n      watch(\n        () => dataStore.layers,\n        () => {\n          if (isMapReady.value) {\n            // 距離圓圈功能已移除\n          }\n        },\n        { deep: true }\n      );\n\n      // 👀 監聽器：監聽當前國家變化\n      watch(\n        () => props.currentCountry,\n        (newCountry) => {\n          if (isMapReady.value && newCountry) {\n            // currentCountry 是 layerName，需要找到對應的圖層\n            const allLayers = dataStore.getAllLayers();\n            const layer = allLayers.find((l) => l.layerName === newCountry);\n            if (layer) {\n              navigateToLocation(layer.center);\n            }\n          }\n        }\n      );\n\n      // 📤 返回組件公開的屬性和方法\n      return {\n        mapContainer,\n        mapContainerId,\n        isAnyLayerVisible,\n        currentCountryInfo,\n        invalidateSize,\n        defineStore,\n        navigateToLocation,\n      };\n    },\n  };\n</script>\n\n<template>\n  <!-- 🗺️ 地圖主容器 -->\n  <div id=\"map-container\" class=\"h-100 w-100 position-relative bg-transparent z-0\">\n    <!-- 🗺️ D3.js 地圖容器 -->\n    <div :id=\"mapContainerId\" ref=\"mapContainer\" class=\"h-100 w-100\"></div>\n  </div>\n</template>\n\n<style scoped>\n  @import '../assets/css/common.css';\n\n  #map-container {\n    overflow: hidden;\n  }\n\n  /* 距離圓圈現在使用 D3.js 繪製，不需要 CSS 樣式 */\n\n  :deep(.country) {\n    transition: fill 0.2s ease;\n  }\n\n  :deep(.country:hover) {\n    fill: #c0c0c0;\n  }\n\n  :deep(.city-marker) {\n    transition: r 0.2s ease;\n  }\n\n  :deep(.city-marker:hover) {\n    r: 6;\n  }\n</style>\n","/**\n * 📦 數據存儲模組 (Data Store Module)\n *\n * 管理城市圖層數據和地圖導航功能\n * 使用 Pinia 狀態管理系統和 Vue 3 Composition API\n */\n\n// 核心依賴\nimport { defineStore } from 'pinia';\nimport { ref, computed } from 'vue';\n\n/**\n * 🏪 數據存儲商店定義 (Data Store Definition)\n *\n * 使用 Pinia 的 defineStore 創建一個名為 'data' 的狀態管理商店。\n * 採用 Composition API 語法，提供更好的 TypeScript 支援和代碼組織。\n *\n * @returns {Object} 包含所有狀態和方法的商店對象\n */\nexport const useDataStore = defineStore(\n  'data', // 商店唯一標識符\n  () => {\n    // 🎯 固定縮放級別常數\n    const COUNTRY_ZOOM_LEVEL = 16;\n    /**\n     * 🗺️ 圖層配置數據 (Layer Configuration Data)\n     *\n     * 定義所有可用的地圖圖層，採用分組結構組織，每個圖層包含完整的配置信息。\n     * 使用 ref 創建響應式數據，當圖層狀態改變時會自動更新相關 UI 組件。\n     *\n     * 📋 圖層結構說明：\n     * - groupName: 圖層組名稱，用於 UI 分組顯示\n     * - groupLayers: 該組下的所有圖層列表\n     *   - layerId: 圖層唯一標識符\n     *   - layerName: 圖層顯示名稱\n     *   - colorName: 圖層顏色名稱（對應 CSS 變數）\n     *   - geoJsonData: GeoJSON 格式的地理數據\n     *   - loader: 數據載入函數\n     *   - fileName: 數據文件路徑\n     *   - fieldName: 主要字段名稱\n     *   - center: 國家中心座標\n     *   - zoom: 縮放級別\n     */\n    const layers = ref([\n      {\n        // 🌍 世界國家地圖集合\n        // 包含各大洲代表性國家的座標點\n        groupName: '世界國家',\n        groupLayers: [\n          {\n            // 🏝️ 台灣國家配置\n            layerId: 'Taiwan', // 圖層唯一標識符\n            layerName: 'TAIWAN', // 圖層顯示名稱\n            center: [120.982025, 23.973875], // 台灣地理中心 [經度, 緯度] 120°58′55.2886″E 23°58′25.9486″N\n          },\n          {\n            // 🏛️ 中國國家配置\n            layerId: 'China', // 圖層唯一標識符\n            layerName: 'CHINA', // 圖層顯示名稱\n            center: [116.39162, 39.89898], // 中國中心座標 [經度, 緯度]\n          },\n          {\n            // 🏯 日本國家配置\n            layerId: 'Japan', // 圖層唯一標識符\n            layerName: 'JAPAN', // 圖層顯示名稱\n            center: [139.774167, 35.684444], // 日本中心座標 [經度, 緯度]\n          },\n          {\n            // 🏛️ 美國國家配置\n            layerId: 'UnitedStates', // 圖層唯一標識符\n            layerName: 'UNITED STATES', // 圖層顯示名稱\n            center: [-77.036548, 38.895108], // 美國中心座標 [經度, 緯度]\n          },\n          {\n            // 🏛️ 法國國家配置\n            layerId: 'France', // 圖層唯一標識符\n            layerName: 'FRANCE', // 圖層顯示名稱\n            center: [2.3488, 48.8534], // 法國中心座標 [經度, 緯度]\n          },\n          {\n            // 🏛️ 德國國家配置\n            layerId: 'Germany', // 圖層唯一標識符\n            layerName: 'GERMANY', // 圖層顯示名稱\n            center: [13.399, 52.5108], // 德國中心座標 [經度, 緯度]\n          },\n        ],\n      },\n    ]);\n\n    /**\n     * 🏠 台灣 (Taiwan)\n     *\n     * 台灣在地圖上會以紅色標示\n     */\n    const homeCountry = ref('Taiwan');\n\n    /**\n     * 🌍 已造訪國家列表 (Visited Countries List)\n     *\n     * 這些國家在地圖上會以淺藍色標示\n     * 名稱需與 GeoJSON 中的 properties.NAME 欄位完全匹配\n     * 按英文字母順序排列\n     * 注意：微型國家（列支敦士登、聖馬利諾、教廷、摩納哥、安道爾、馬爾他）\n     * 在此低解析度地圖中不存在\n     */\n    const visitedCountries = ref([\n      'Australia',\n      'Austria',\n      'Belgium',\n      'China',\n      'Czechia',\n      'Denmark',\n      'Estonia',\n      'Finland',\n      'France',\n      'Germany',\n      'Greece',\n      'Greenland',\n      'Hungary',\n      'Iceland',\n      'Italy',\n      'Japan',\n      'Laos',\n      'Luxembourg',\n      'Malaysia',\n      'Mexico',\n      'Mongolia',\n      'Netherlands',\n      'North Korea',\n      'Norway',\n      'Philippines',\n      'Poland',\n      'Qatar',\n      'Singapore',\n      'Slovakia',\n      'South Korea',\n      'Spain',\n      'Sweden',\n      'Switzerland',\n      'Thailand',\n      'United Kingdom',\n      'United States of America',\n      'Vietnam',\n    ]);\n\n    /**\n     * 🏠 檢查國家是否為台灣 (Check if Country is Taiwan)\n     *\n     * @param {string} countryName - 國家名稱（來自 GeoJSON 的 properties.name 或其他屬性）\n     * @returns {boolean} 是否為台灣\n     */\n    const isHomeCountry = (countryName) => {\n      if (!countryName) return false;\n      return countryName.trim() === homeCountry.value;\n    };\n\n    /**\n     * 🔍 檢查國家是否已造訪 (Check if Country is Visited)\n     *\n     * @param {string} countryName - 國家名稱（來自 GeoJSON 的 properties.name 或其他屬性）\n     * @returns {boolean} 是否為已造訪國家\n     */\n    const isCountryVisited = (countryName) => {\n      if (!countryName) return false;\n\n      // 標準化國家名稱進行比對\n      const normalizedName = countryName.trim();\n\n      return visitedCountries.value.some((visitedCountry) => {\n        // 完全匹配\n        if (normalizedName === visitedCountry) return true;\n\n        // 部分匹配（例如 \"United States\" 匹配 \"United States of America\"）\n        if (normalizedName.includes(visitedCountry) || visitedCountry.includes(normalizedName)) {\n          return true;\n        }\n\n        return false;\n      });\n    };\n\n    /**\n     * 🔍 根據圖層 ID 查找圖層對象 (Find Layer by ID)\n     *\n     * 在分組結構的圖層配置中搜索指定 ID 的圖層，返回完整的圖層配置對象。\n     * 使用嵌套循環遍歷所有圖層組和圖層，確保能夠找到正確的圖層。\n     *\n     * @param {string} layerId - 要查找的圖層唯一標識符\n     * @returns {Object|null} 找到的圖層對象，如果未找到則返回 null\n     *\n     * @example\n     * const layer = findLayerById('安養機構');\n     * if (layer) {\n     *   console.log('找到圖層:', layer.layerName);\n     * }\n     */\n    const findLayerById = (layerId) => {\n      // 遍歷所有圖層組\n      for (const group of layers.value) {\n        // 遍歷當前組的所有圖層\n        for (const layer of group.groupLayers) {\n          // 檢查圖層 ID 是否匹配\n          if (layer.layerId === layerId) {\n            return layer; // 返回找到的圖層對象\n          }\n        }\n      }\n      return null; // 未找到指定 ID 的圖層\n    };\n\n    /**\n     * 📋 獲取所有圖層的扁平陣列 (Get All Layers as Flat Array)\n     *\n     * 將分組結構的圖層配置轉換為扁平的一維陣列，便於進行批量操作和遍歷。\n     * 使用展開運算符將每個圖層組的所有圖層合併到一個陣列中。\n     *\n     * @returns {Array} 包含所有圖層的扁平陣列\n     *\n     * @example\n     * const allLayers = getAllLayers();\n     * console.log('總共有', allLayers.length, '個圖層');\n     */\n    const getAllLayers = () => {\n      const allLayers = []; // 初始化結果陣列\n      // 遍歷所有圖層組\n      for (const group of layers.value) {\n        // 使用展開運算符將當前組的所有圖層添加到結果陣列\n        allLayers.push(...group.groupLayers);\n      }\n      return allLayers; // 返回扁平化的圖層陣列\n    };\n\n    /**\n     * 🔄 切換圖層可見性狀態 (Toggle Layer Visibility)\n     *\n     * 控制指定圖層的顯示/隱藏狀態，並在圖層首次顯示時自動載入相關數據。\n     * 這是圖層管理的核心方法，負責處理圖層狀態變更和數據載入邏輯。\n     *\n     * @param {string} layerId - 要切換狀態的圖層唯一標識符\n     * @returns {Promise<void>} 異步操作，無返回值\n     *\n     * @example\n     * // 切換安養機構圖層的顯示狀態\n     * await toggleLayerVisibility('安養機構');\n     */\n    // 移除圖層可見性切換（城市圖層永久可見，且無需勾選切換）\n\n    // 移除 GeoJSON 載入功能，現在直接使用座標點\n\n    // ------------------------------------------------------------\n    // 選中的地圖物件（用於清除選取狀態）\n    const selectedFeature = ref(null);\n\n    const setSelectedFeature = (feature) => {\n      selectedFeature.value = feature;\n    };\n\n    // ------------------------------------------------------------\n    // 地圖導航功能\n    const mapInstance = ref(null);\n\n    const setMapInstance = (map) => {\n      mapInstance.value = map;\n    };\n\n    /**\n     * 🌍 導航到指定國家\n     *\n     * 將地圖視圖移動到指定國家的中心位置\n     *\n     * @param {string} countryId - 國家圖層的唯一標識符\n     * @returns {void}\n     */\n    const navigateToCountry = (countryId) => {\n      // 查找國家圖層\n      const countryLayer = findLayerById(countryId);\n      if (!countryLayer) {\n        console.error('❌ 找不到國家圖層:', countryId);\n        return;\n      }\n\n      // 檢查地圖實例是否準備就緒\n      if (!mapInstance.value) {\n        console.error('❌ 地圖實例未準備就緒，等待地圖初始化...');\n        // 延遲重試機制\n        setTimeout(() => {\n          if (mapInstance.value) {\n            console.log('🌍 地圖已準備就緒，重新嘗試移動');\n            navigateToCountry(countryId);\n          } else {\n            console.error('❌ 地圖實例仍未準備就緒');\n          }\n        }, 1000);\n        return;\n      }\n\n      // 使用國家中心座標 (D3.js 使用 [lng, lat] 格式)\n      const center = countryLayer.center;\n      const optimalZoom = COUNTRY_ZOOM_LEVEL; // 使用固定的縮放級別\n\n      // 執行地圖導航\n      try {\n        // D3.js 地圖使用 navigateToLocation 方法\n        if (mapInstance.value.navigateToLocation) {\n          mapInstance.value.navigateToLocation(center, optimalZoom);\n          console.log(`🌍 成功導航到國家: ${countryLayer.layerName}`);\n        }\n      } catch (error) {\n        console.error('❌ 地圖導航失敗:', error);\n      }\n    };\n\n    return {\n      layers,\n      findLayerById, // 根據 ID 尋找圖層\n      getAllLayers, // 獲取所有圖層的扁平陣列\n      selectedFeature, // 選中的地圖要素\n      setSelectedFeature, // 設定選中的地圖要素\n      mapInstance, // 地圖實例\n      setMapInstance, // 設定地圖實例\n      navigateToCountry, // 導航到指定國家\n      homeCountry, // 台灣（紅色標示）\n      isHomeCountry, // 檢查國家是否為台灣\n      visitedCountries, // 已造訪國家列表\n      isCountryVisited, // 檢查國家是否已造訪\n      // 所有圖層都是可見的，所以直接返回所有圖層\n      visibleLayers: computed(() => getAllLayers()),\n    };\n  },\n  {\n    persist: true,\n  }\n);\n","/**\n * 🗺️ 定義存儲模組 (Define Store Module)\n *\n * 管理應用程式的全局配置和設定，包括底圖選擇和地圖視圖狀態。\n * 主要功能：\n * - 管理底圖配置和選擇\n * - 保存地圖視圖狀態（中心點、縮放級別）\n * - 提供底圖切換功能\n *\n * 技術架構：\n * - Pinia 狀態管理\n * - 響應式狀態更新\n * - 模組化配置管理\n */\n\nimport { defineStore } from 'pinia';\n\nexport const useDefineStore = defineStore('define', {\n  state: () => ({\n    // 🗺️ 當前選中的底圖類型（固定為標準地圖）\n    selectedBasemap: 'carto_dark',\n\n    // 🗺️ 地圖視圖狀態\n    mapView: {\n      center: [25.04583, 121.51972], // 地圖中心點 [緯度, 經度] - 台灣\n      zoom: 16, // 縮放等級（調整到16級，顯示詳細的內容）\n    },\n    // 🗺️ 底圖配置列表（僅保留標準地圖）\n    basemaps: [\n      {\n        label: 'Carto Dark',\n        value: 'carto_dark',\n        url: 'https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png',\n      },\n    ],\n  }),\n  actions: {\n    /**\n     * 🗺️ 設定選中的底圖\n     * @param {string} value - 底圖類型值\n     */\n    setSelectedBasemap(value) {\n      this.selectedBasemap = value;\n    },\n\n    /**\n     * 🗺️ 設定地圖視圖狀態\n     * @param {Array} center - 地圖中心點 [緯度, 經度]\n     * @param {number} zoom - 縮放級別\n     */\n    setMapView(center, zoom) {\n      this.mapView.center = center;\n      this.mapView.zoom = zoom;\n    },\n  },\n});\n","import { render } from \"./MapTab.vue?vue&type=template&id=942f9c48&scoped=true\"\nimport script from \"./MapTab.vue?vue&type=script&lang=js\"\nexport * from \"./MapTab.vue?vue&type=script&lang=js\"\n\nimport \"./MapTab.vue?vue&type=style&index=0&id=942f9c48&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-942f9c48\"]])\n\nexport default __exports__","import { render } from \"./HomeView.vue?vue&type=template&id=a81a8a9a\"\nimport script from \"./HomeView.vue?vue&type=script&lang=js\"\nexport * from \"./HomeView.vue?vue&type=script&lang=js\"\n\nimport \"./HomeView.vue?vue&type=style&index=0&id=a81a8a9a&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * 🚀 Vue Router 路由配置\n *\n * 長照空間分析系統的路由管理\n * 使用 Vue Router 4 進行單頁應用程式路由控制\n *\n * @author 長照空間分析團隊\n * @version 1.0.0\n */\n\nimport { createRouter, createWebHistory } from 'vue-router';\nimport HomeView from '../views/HomeView.vue';\n\n/**\n * 📍 路由配置陣列\n * 定義應用程式的所有路由規則\n */\nconst routes = [\n  {\n    path: '/', // 🏠 根路徑\n    name: 'Home', // 路由名稱\n    component: HomeView, // 對應的 Vue 組件\n  },\n];\n\n/**\n * 🛣️ 路由器實例創建\n *\n * 配置說明：\n * - history: 使用 HTML5 History API 模式\n * - base: 設定應用程式的基礎路徑為 '/30DayMapChallenge-04_Data-challenge-My-Data/'\n * - routes: 路由配置陣列\n */\nconst router = createRouter({\n  history: createWebHistory('/30DayMapChallenge-04_Data-challenge-My-Data/'),\n  routes,\n});\n\nexport default router;\n","/**\n * 🚀 應用程式主入口文件 (Main Application Entry Point)\n *\n * 本文件是整個 Vue.js 應用程式的啟動入口，負責初始化所有核心系統和第三方依賴。\n * 採用模組化設計，確保各系統間的依賴關係清晰明確。\n *\n * 📋 主要功能模組：\n * 1. 🎨 樣式系統初始化 - Bootstrap 5 + 自定義主題 + 第三方 UI 庫樣式\n * 2. 🧩 Vue 3 應用程式核心 - 使用 Composition API 的現代化 Vue 架構\n * 3. 🗺️ 路由系統配置 - Vue Router 4 單頁應用程式導航管理\n * 4. 📦 狀態管理系統 - Pinia 全域狀態管理和數據持久化\n * 5. 🌍 DOM 掛載與渲染 - 將應用程式掛載到 HTML 容器中\n * 6. 🔧 第三方庫整合 - D3.js 地圖、Font Awesome 圖示、Bootstrap 組件\n *\n * 🏗️ 技術架構：\n * - Vue 3.3+ (Composition API + <script setup> 語法)\n * - Vue Router 4 (聲明式路由配置)\n * - Pinia 2+ (輕量級狀態管理，替代 Vuex)\n * - Bootstrap 5.3+ (響應式 UI 框架)\n * - D3.js 7+ (數據可視化和地圖繪製庫)\n * - Font Awesome 6+ (向量圖示庫)\n *\n * 🔄 初始化流程：\n * 1. 載入所有必要的樣式和 JavaScript 依賴\n * 2. 創建 Vue 應用程式實例\n * 3. 配置並註冊路由系統\n * 4. 配置並註冊狀態管理系統\n * 5. 將應用程式掛載到 DOM 元素\n * 6. 輸出初始化完成日誌\n *\n * 📁 相關文件：\n * - ./App.vue - 根組件\n * - ./router/index.js - 路由配置\n * - ./stores/ - Pinia 狀態管理模組\n * - ./assets/css/ - 自定義樣式文件\n */\n\n// 🔧 Vue 核心模組引入 (Vue Core Module Imports)\nimport { createApp } from 'vue';\nimport { createPinia } from 'pinia';\n\n// 🧩 應用程式組件引入 (Application Component Imports)\nimport App from './App.vue';\nimport router from './router';\n\n// 🎨 引入第三方樣式文件 (Import Third-Party Style Files)\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Bootstrap 5 CSS 框架\nimport '@fortawesome/fontawesome-free/css/all.min.css'; // Font Awesome 圖示庫\n\n// 🎨 引入自定義樣式文件 (Import Custom Style Files)\nimport './assets/css/common.css'; // 共用樣式（已包含變數和主題配置）\n\n// ⚙️ 引入第三方 JavaScript 文件 (Import Third-Party JavaScript Files)\nimport 'bootstrap/dist/js/bootstrap.bundle.min.js'; // Bootstrap JS（含 Popper.js）\n// 提供下拉選單、模態框、工具提示等互動功能\n\n// 🐛 調試資訊輸出 (Debug Information Output)\nconsole.log('🎨 樣式文件載入完成');\n\n// 🚀 創建並配置 Vue 應用程式實例 (Create and Configure Vue Application Instance)\nconst app = createApp(App);\n\n// 📦 創建 Pinia 狀態管理實例 (Create Pinia State Management Instance)\nconst pinia = createPinia();\n\n// 🗺️ 註冊 Vue Router 路由系統 (Register Vue Router Navigation System)\napp.use(router);\n\n// 📦 註冊 Pinia 狀態管理系統 (Register Pinia State Management System)\napp.use(pinia);\n\n// 🌍 掛載應用程式到 DOM 元素 (Mount Application to DOM Element)\n// 將 Vue 應用程式掛載到 index.html 中 id=\"app\" 的元素上\napp.mount('#app');\n\n// 🐛 應用程式啟動完成的調試資訊 (Application Startup Debug Information)\nconsole.log('🚀 空間分析視覺化平台已啟動');\nconsole.log('📦 Pinia 狀態管理已初始化');\nconsole.log('🗺️ Vue Router 路由系統已就緒');\nconsole.log('🎨 Bootstrap 5 UI 框架已載入');\nconsole.log('🗺️ D3.js 地圖庫已準備就緒');\nconsole.log('🔤 Font Awesome 圖示庫已載入');\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t524: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunk_30daymapchallenge_04_data_challenge_my_data\"] = self[\"webpackChunk_30daymapchallenge_04_data_challenge_my_data\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [504], function() { return __webpack_require__(5102); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["id","class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createVNode","_component_router_view","name","components","setup","isLoading","ref","loadingText","loadingProgress","showLoadingProgress","loadingSubText","__exports__","render","style","_component_MapTab","onMapReady","$setup","setMapInstance","currentCountry","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","_Fragment","_renderList","countries","country","key","layerId","_normalizeClass","layerName","onClick","$event","navigateToCountry","_hoisted_7","mapContainerId","useDataStore","defineStore","COUNTRY_ZOOM_LEVEL","layers","groupName","groupLayers","center","homeCountry","visitedCountries","isHomeCountry","countryName","trim","value","isCountryVisited","normalizedName","some","visitedCountry","includes","findLayerById","group","layer","getAllLayers","allLayers","push","selectedFeature","setSelectedFeature","feature","mapInstance","map","countryId","countryLayer","console","error","setTimeout","log","optimalZoom","navigateToLocation","visibleLayers","computed","persist","useDefineStore","state","selectedBasemap","mapView","zoom","basemaps","label","url","actions","setSelectedBasemap","this","setMapView","props","type","String","default","emits","emit","dataStore","mapContainer","svgElement","svg","projection","path","g","ringsGroup","isMapReady","Math","random","toString","substr","worldData","isAnyLayerVisible","length","currentCountryInfo","find","loadWorldData","async","response","fetch","ok","Error","status","data","json","features","createMap","rect","getBoundingClientRect","width","height","warn","d3","append","attr","node","padding","availableWidth","availableHeight","scale","min","rotate","translate","clipAngle","scaleExtent","on","call","mapInterface","drawDistanceRings","cx","cy","earthRadiusMeters","stepMeters","maxDistanceMeters","rings","i","distanceMeters","radiusPx","index","earthBoundaryRadiusPx","PI","raise","selection","selectAll","d","enter","merge","exit","remove","drawWorldMap","properties","ADMIN","NAME","invalidateSize","initMap","attempts","maxAttempts","loaded","tryCreateMap","resizeObserver","resizeTimeout","setupResizeObserver","window","ResizeObserver","clearTimeout","observe","onMounted","nextTick","onUnmounted","disconnect","watch","deep","newCountry","l","MapTab","c","routes","component","HomeView","router","createRouter","history","createWebHistory","app","createApp","App","pinia","createPinia","use","mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","deferred","O","result","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","Object","keys","every","splice","r","n","getter","__esModule","a","definition","o","defineProperty","enumerable","get","globalThis","Function","e","obj","prop","prototype","hasOwnProperty","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","chunkLoadingGlobal","self","forEach","bind","__webpack_exports__"],"sourceRoot":""}